name: GRUBA LAW LIBRARY

on:
  push:
    branches:
      - main

jobs:
  macos_build:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js and build for macOS
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.1
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm install
          npm install -g electron-builder

      - name: Build macOS .app
        run: npx electron-builder --mac dir

      - name: Debug dist directory
        run: ls -R dist  # List files to ensure .app exists

      # Create GitHub Release for macOS
      - name: Create GitHub Release for macOS
        id: create_macos_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.0  # Same version for macOS and Windows
          release_name: "GRUBA LAW LIBRARY v1.0.0"
          body: "Release of the Gruba Law Library for macOS and Windows"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save macOS upload_url
        run: echo "${{ steps.create_macos_release.outputs.upload_url }}" > upload_url.txt

      - name: Verify .app file existence
        run: |
          APP_FILE=$(find dist/ -name "*.app" -print -quit)
          if [ -z "$APP_FILE" ]; then
            echo "Error: .app file not found in the dist/ directory."
            exit 1
          fi
          echo "Found macOS .app: $APP_FILE"
          echo "app_path=$APP_FILE" >> $GITHUB_ENV  # Store the path to the .app file
      
      - name: Archive .app into .zip
        run: |
          ZIP_FILE="dist/Gruba-Law-Library-macOS.zip"
          APP_DIR="${{ env.app_path }}"  # Use the path stored in the environment variable
          echo "Zipping the .app file from: $APP_DIR"
          zip -r $ZIP_FILE "$APP_DIR"
          echo "zip_file=$ZIP_FILE" >> $GITHUB_ENV  # Save zip file path for later use
      
      - name: Upload macOS .app Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_macos_release.outputs.upload_url }}
          asset_path: ${{ env.zip_file }}  # Path to the zip file
          asset_name: Gruba-Law-Library-macOS.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows_build:
    runs-on: windows-latest
    needs: macos_build  # Make this job depend on the macOS build job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js and build for Windows
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.1
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm install
          npm install -g electron-builder

      - name: Build Windows .exe
        run: npx electron-builder --win dir

      - name: Set upload_url environment variable for Windows
        run: |
          $UPLOAD_URL = Get-Content -Raw -Path upload_url.txt
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV
        shell: pwsh

      - name: Archive Windows .exe into .zip
        run: |
          ZIP_FILE="dist/Gruba-Law-Library-Windows.zip"
          EXE_FILE="dist/win-unpacked/Gruba-Law-Library.exe"
          echo "Zipping the .exe file from: $EXE_FILE"
          Compress-Archive -Path $EXE_FILE -DestinationPath $ZIP_FILE
          echo "zip_file=$ZIP_FILE" >> $GITHUB_ENV  # Save zip file path for later use

      - name: Upload Windows .exe Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # Use the uploaded URL from the macOS release
          asset_path: ${{ env.zip_file }}  # Path to the Windows zip file
          asset_name: Gruba-Law-Library-Windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
