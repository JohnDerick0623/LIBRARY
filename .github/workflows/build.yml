name: GRUBA LAW LIBRARY

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.1
          cache: 'npm'

      # Install necessary dependencies
      - name: Install Dependencies
        run: |
          npm install
          npm install -g electron-builder

      # Build the application based on OS
      - name: Build for ${{ matrix.os }}
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            npx electron-builder --mac dir
          else
            npx electron-builder --win dir
          fi

      # Debug dist directory to locate build output
      - name: Debug dist directory
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            ls -R dist
          else
            dir dist
          fi

      # Find and verify the appropriate file existence (.app for macOS, .exe for Windows)
      - name: Verify build file existence
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            APP_FILE=$(find dist/ -name "*.app" -print -quit)
            if [ -z "$APP_FILE" ]; then
              echo "Error: .app file not found in the dist/ directory."
              exit 1
            fi
            echo "Found macOS .app: $APP_FILE"
            echo "app_path=$APP_FILE" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            EXE_FILE=$(powershell -Command "Get-ChildItem -Recurse -Filter *.exe -Path dist | Select-Object -First 1")
            if [ -z "$EXE_FILE" ]; then
              echo "Error: .exe file not found in the dist/ directory."
              exit 1
            fi
            echo "Found Windows .exe: $EXE_FILE"
            echo "exe_path=$EXE_FILE" >> $GITHUB_ENV
          fi



      # Archive the build file into a .zip archive
      - name: Archive build into .zip
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            ZIP_FILE="dist/Gruba-Law-Library-macOS.zip"
            APP_DIR="${{ env.app_path }}"
            zip -r $ZIP_FILE "$APP_DIR"
            echo "zip_file=$ZIP_FILE" >> $GITHUB_ENV
          else
            ZIP_FILE="dist/Gruba-Law-Library-Windows.zip"
            EXE_FILE="${{ env.exe_path }}"
            Compress-Archive -Path $EXE_FILE -DestinationPath $ZIP_FILE
            echo "zip_file=$ZIP_FILE" >> $GITHUB_ENV
          fi

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v2.0.0
          release_name: "GRUBA LAW LIBRARY v2.0.0"
          body: |
            ðŸŽ‰ New release of the Gruba Law Library app for macOS and Windows!
            Download the `.app` or `.exe` file below.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the release asset (macOS or Windows)
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.zip_file }}
          asset_name: ${{ matrix.os == 'macos-latest' && 'Gruba-Law-Library-macOS.zip' || 'Gruba-Law-Library-Windows.zip' }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Save the upload_url as an artifact for use in other jobs
      - name: Save upload_url as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-upload-url
          path: ${{ steps.create_release.outputs.upload_url }}
